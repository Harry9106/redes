//
// Generated file, do not edit! Created by nedtool 5.1 from EtherFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __ETHERFRAME_M_H
#define __ETHERFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>EtherFrame.msg:2</tt> by nedtool.
 * <pre>
 * message EtherFrame
 * {
 *     \@customize(true);
 *     char data[1514];
 * }
 * </pre>
 *
 * EtherFrame_Base is only useful if it gets subclassed, and EtherFrame is derived from it.
 * The minimum code to be written for EtherFrame is the following:
 *
 * <pre>
 * class EtherFrame : public EtherFrame_Base
 * {
 *   private:
 *     void copy(const EtherFrame& other) { ... }

 *   public:
 *     EtherFrame(const char *name=nullptr, short kind=0) : EtherFrame_Base(name,kind) {}
 *     EtherFrame(const EtherFrame& other) : EtherFrame_Base(other) {copy(other);}
 *     EtherFrame& operator=(const EtherFrame& other) {if (this==&other) return *this; EtherFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual EtherFrame *dup() const override {return new EtherFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from EtherFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(EtherFrame)
 * </pre>
 */
class EtherFrame_Base : public ::omnetpp::cMessage
{
  protected:
    char data[1514];

  private:
    void copy(const EtherFrame_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherFrame_Base&);
    // make constructors protected to avoid instantiation
    EtherFrame_Base(const char *name=nullptr, short kind=0);
    EtherFrame_Base(const EtherFrame_Base& other);
    // make assignment operator protected to force the user override it
    EtherFrame_Base& operator=(const EtherFrame_Base& other);

  public:
    virtual ~EtherFrame_Base();
    virtual EtherFrame_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class EtherFrame");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getDataArraySize() const;
    virtual char getData(unsigned int k) const;
    virtual void setData(unsigned int k, char data);
};


#endif // ifndef __ETHERFRAME_M_H

